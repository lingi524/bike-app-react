{"version":3,"sources":["components/Header.js","components/Weather.js","components/images/mtb.png","components/Slider.js","components/Answer.js","App.js","index.js"],"names":["Header","className","Weather","cityName","weatherType","temperature","perceivedTemperature","Slider","src","mtb","alt","Answer","weatherTypeMain","App","useState","setCityName","setWeatherType","setWeatherTypeMain","setTemperature","setPerceivedTemperature","window","addEventListener","long","lat","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude","api","fetch","then","response","json","data","console","log","name","weather","description","main","temp","feels_like","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAUeA,MARf,WACI,OACI,qBAAKC,UAAU,SAAf,SACI,mDCQGC,MAXf,YAA+E,IAA5DC,EAA2D,EAA3DA,SAAUC,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,YAAaC,EAAuB,EAAvBA,qBAEnD,OACI,sBAAKL,UAAU,cAAf,UACI,6DAAgCE,EAAhC,OACA,mDAAsBC,EAAtB,QAAwCC,EAAxC,UACA,+CAAkBC,EAAlB,cCRG,MAA0B,gCCW1BC,MARf,WACI,OACI,8BACI,qBAAKN,UAAU,UAAUO,IAAKC,EAAKC,IAAI,YCKpCC,MATf,YAA8F,EAA5ER,SAA4E,EAAlEC,YAAkE,EAArDQ,gBAAsD,IAArCP,EAAoC,EAApCA,YAEtD,OAF0F,EAAvBC,qBAG/D,qBAAKL,UAAU,SAAf,SACA,4BAAII,EAAY,EAAE,UAAU,iBCyErBQ,MAvEf,WAEE,MAA8BC,mBAAS,cAAvC,mBAAKX,EAAL,KAAeY,EAAf,KACA,EAAoCD,mBAAS,cAA7C,mBAAKV,EAAL,KAAkBY,EAAlB,KACA,EAA4CF,mBAAS,IAArD,mBAAKF,EAAL,KAAsBK,EAAtB,KACA,EAAoCH,mBAAS,cAA7C,mBAAKT,EAAL,KAAkBa,EAAlB,KACA,EAAsDJ,mBAAS,cAA/D,mBAAKR,EAAL,KAA2Ba,EAA3B,KAiCA,OA9BAC,OAAOC,iBAAiB,QAAQ,WAE5B,IAAIC,EACAC,EAEAC,UAAUC,aACVD,UAAUC,YAAYC,oBACpB,SAAAC,GACEL,EAAOK,EAASC,OAAOC,UACvBN,EAAMI,EAASC,OAAOE,SACtB,IAAMC,EAAG,6DAAyDR,EAAzD,gBAAoED,EAApE,wDAGTU,MAAMD,GACLE,MAAM,SAAAC,GACH,OAAOA,EAASC,UAEnBF,MAAM,SAAAG,GACHC,QAAQC,IAAIF,GACZrB,EAAYqB,EAAKG,MACjBvB,EAAeoB,EAAKI,QAAQ,GAAGC,aAC/BxB,EAAmBmB,EAAKI,QAAQ,GAAGE,MACnCxB,EAAekB,EAAKM,KAAKC,MACzBxB,EAAwBiB,EAAKM,KAAKE,qBAQhD,sBAAK3C,UAAU,YAAf,UACA,cAAC,EAAD,IACA,cAAC,EAAD,CACEE,SAAUA,EACVY,YAAaA,EACbX,YAAaA,EACbY,eAAgBA,EAChBJ,gBAAiBA,EACjBK,mBAAoBA,EACpBZ,YAAaA,EACba,eAAgBA,EAChBZ,qBAAsBA,EACtBa,wBAAyBA,IAE3B,cAAC,EAAD,IACA,cAAC,EAAD,CACEhB,SAAUA,EACVY,YAAaA,EACbX,YAAaA,EACbY,eAAgBA,EAChBJ,gBAAiBA,EACjBK,mBAAoBA,EACpBZ,YAAaA,EACba,eAAgBA,EAChBZ,qBAAsBA,EACtBa,wBAAyBA,QCpE/B0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.f4f5d236.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header () {\n    return (\n        <div className=\"Header\">\n            <h1>Ready to ride?</h1>\n        </div>\n    )\n}\n\nexport default Header","import React from \"react\";\n\nfunction Weather ({cityName, weatherType, temperature, perceivedTemperature}) {\n   \n    return (\n        <div className=\"weatherText\">\n            <p>Should you go for a ride in {cityName}?</p>\n            <p>Right now there's {weatherType} and {temperature}°</p>\n            <p>It feels like {perceivedTemperature}°</p>\n        </div> \n        )\n}\n\nexport default Weather","export default __webpack_public_path__ + \"static/media/mtb.f0c9e1ec.png\";","import React from \"react\";\nimport mtb from \"./images/mtb.png\";\n\nfunction Slider () {\n    return (\n        <div>\n            <img className=\"bikeImg\" src={mtb} alt=\"Bike\" />\n        </div>\n    )\n}\n\nexport default Slider","import React,  { useState } from \"react\";\n\nfunction Answer ({cityName, weatherType, weatherTypeMain, temperature, perceivedTemperature}) {\n\n    return (\n        <div className=\"Answer\">\n        <p>{temperature<5?'STAY IN':'GO FOR IT'}</p>\n        </div>\n    )\n}\n\nexport default Answer","import React, { useState } from \"react\";\nimport './App.css';\n\nimport Header from './components/Header';\nimport Weather from './components/Weather';\nimport Slider from './components/Slider';\nimport Answer from './components/Answer';\n\nfunction App() {\n\n  let [cityName, setCityName] = useState(\"Loading...\");\n  let [weatherType, setWeatherType] = useState(\"Loading...\");\n  let [weatherTypeMain, setWeatherTypeMain] = useState(\"\");\n  let [temperature, setTemperature] = useState(\"Loading...\");\n  let [perceivedTemperature, setPerceivedTemperature] = useState(\"Loading...\");\n\n\n  window.addEventListener(\"load\", ()=> {\n\n      let long;\n      let lat;\n\n      if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(\n            position => {\n              long = position.coords.longitude;\n              lat = position.coords.latitude;\n              const api = `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&units=metric&appid=f8b7d1603752f2b6d598d1cb2893c5b2`\n              \n              \n              fetch(api)\n              .then (response => {\n                  return response.json();\n              })\n              .then (data => {\n                  console.log(data);\n                  setCityName(data.name);\n                  setWeatherType(data.weather[0].description)\n                  setWeatherTypeMain(data.weather[0].main)\n                  setTemperature(data.main.temp)\n                  setPerceivedTemperature(data.main.feels_like)\n              });\n              });\n\n      }\n  });\n\n  return (\n    <div className=\"container\">\n    <Header />\n    <Weather \n      cityName={cityName} \n      setCityName={setCityName} \n      weatherType={weatherType} \n      setWeatherType={setWeatherType} \n      weatherTypeMain={weatherTypeMain}\n      setWeatherTypeMain={setWeatherTypeMain}\n      temperature={temperature} \n      setTemperature={setTemperature}\n      perceivedTemperature={perceivedTemperature}\n      setPerceivedTemperature={setPerceivedTemperature}\n    />\n    <Slider />\n    <Answer \n      cityName={cityName} \n      setCityName={setCityName} \n      weatherType={weatherType} \n      setWeatherType={setWeatherType} \n      weatherTypeMain={weatherTypeMain}\n      setWeatherTypeMain={setWeatherTypeMain}\n      temperature={temperature} \n      setTemperature={setTemperature}\n      perceivedTemperature={perceivedTemperature}\n      setPerceivedTemperature={setPerceivedTemperature}\n    />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}